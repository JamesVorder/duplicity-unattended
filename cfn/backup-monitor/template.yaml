AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  Checks for Duplicity backups in a bucket. Sends an email if no recent backups
  are found for any path (prefix) containing at least one backup set. Before using,
  make sure the sender and recipient addresses/domains are verified in AWS SES.
Metadata:
  AWS::ServerlessRepo::Application:
    Name: duplicity-unattended-monitor
    Description: "Checks for Duplicity backups in a bucket and sends email if they are growing stale."
    Author: Rob Hasselbaum
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['backup']
    HomepageUrl: https://github.com/rhasselbaum/duplicity-unattended
    SemanticVersion: 1.0.2
    SourceCodeUrl: https://github.com/rhasselbaum/duplicity-unattended
Parameters:
  BucketName:
    Type: String
    Description: 'Name of the S3 bucket'
    MinLength: 1
  SenderAddress:
    Type: String
    Description: 'Sender email address of the form: Sender Name <sender@example.com>'
    MinLength: 1
  RecipientAddress:
    Type: String
    Description: 'Recipient email address'
    MinLength: 1
  MaxAgeDays:
    Type: Number
    Description: 'Maximum age in days of a backup set before it is considered stale'
    Default: 7
    MinValue: 1
Globals:
    Function:
        Timeout: 600
        Runtime: python3.7
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backup_monitor/
      Handler: app.lambda_handler
      Description: "Check for recent backups and send email if they don't exist"
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          SENDER_ADDR: !Ref SenderAddress
          RECIPIENT_ADDR: !Ref RecipientAddress
          MAX_AGE_DAYS: !Ref MaxAgeDays
      Events:
        Event:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
      Role: !GetAtt Role.Arn
  Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub 'Duplicity policy for backup monitor of ${BucketName} bucket'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:ListBucket'
            Resource: !Sub 'arn:aws:s3:::${BucketName}'
          - Effect: Allow
            Action: 'ses:SendEmail'
            Resource: '*'
      Roles:
        - !Ref Role
